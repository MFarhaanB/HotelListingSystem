@model HotelListingSystem.Models.Hotel

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Hotels", null, FormMethod.Post, new { enctype = "multipart/form-data", id = "create-form" }))
{
    @Html.AntiForgeryToken()
    <input type="text" hidden id="hiddenChecklists" name="hiddenChecklists" />
    @Html.HiddenFor(x=>x.HotelUserId)
    @*@Html.HiddenFor(x=>x.Id)*@
    <div class="form-horizontal">
        <h4>Create Hotel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaxOccupancy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MaxOccupancy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxOccupancy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Suburb, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Suburb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Suburb, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhysicalAddressCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhysicalAddressCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhysicalAddressCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Hotel Image:", new { @class = "control-label col-md-4" })
            <div class="col-md-7">
                <div class="input-group">
                    <label class="input-group-btn">
                        <span class="btn btn-primary">
                            Browse&hellip; <input type="file" id="imageUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                        </span>
                    </label>
                    <input type="text" class="form-control" id="upload-image-info" readonly>
                </div>
                <span class="text-danger" style="display:none" id="imageError"></span>

            </div>
        </div>

        <div class="form-group">
            @Html.Label("Certificate Of Occupancy Doc:", new { @class = "control-label col-md-4" })
            <div class="col-md-7">
                <div class="input-group">
                    <label class="input-group-btn">
                        <span class="btn btn-primary">
                            Browse&hellip; <input type="file" id="CertificateOfOccupancyDocUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                        </span>
                    </label>
                    <input type="text" class="form-control" id="upload-CertificateOfOccupancyDoc-info" readonly>
                </div>
                <span class="text-danger" style="display:none" id="CertificateOfOccupancyDocError"></span>

            </div>
        </div>

        <div class="form-group">
            @Html.Label("COA Doc:", new { @class = "control-label col-md-4" })
            <div class="col-md-7">
                <div class="input-group">
                    <label class="input-group-btn">
                        <span class="btn btn-primary">
                            Browse&hellip; <input type="file" id="COAUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                        </span>
                    </label>
                    <input type="text" class="form-control" id="upload-COAUpload-info" readonly>
                </div>
                <span class="text-danger" style="display:none" id="COAError"></span>

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsVerified, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsVerified, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.IsVerified, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentPaid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PaymentPaid, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.PaymentPaid, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentDoneDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PaymentDoneDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.PaymentDoneDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Blacklisted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Blacklisted, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Blacklisted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @*<input type="submit" value="Create" class="btn btn-primary" />*@
                <input type="button" onclick="FormValidation()" value="Create" class="btn btn-primary" />

            </div>
        </div>
    </div>
}

<script typeof="text/javascript">
    var docChecklists = [];
    const allowedExtensions = [".png", ".jpg", ".jpeg", ".pdf"];



    $(document).ready(function () {
        ////Proof of address
        $('#imageUpload').on('change', function (event) {

            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-image-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-image-info').val($(this).val());
                }

                var ProofFiles = $('#upload-image-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("imageError").style.display = 'none';
                }
            }
        });


        $('#COAUpload').on('change', function (event) {
            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-COAUpload-info').val("");
                document.getElementById("COAError").style.display = 'block';
                document.getElementById("COAError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-COAUpload-info').val("");
                document.getElementById("COAError").style.display = 'block';
                document.getElementById("COAError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-COAUpload-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-COAUpload-info').val($(this).val());
                }

                var ProofFiles = $('#upload-COAUpload-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("COAError").style.display = 'none';
                }
            }
        });





        ////CertificateOfOccupancyDocUpload
        $('#CertificateOfOccupancyDocUpload').on('change', function (event) {
            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-CertificateOfOccupancyDoc-info').val("");
                document.getElementById("CertificateOfOccupancyDocError").style.display = 'block';
                document.getElementById("CertificateOfOccupancyDocError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-proof-info').val("");
                document.getElementById("CertificateOfOccupancyDocError").style.display = 'block';
                document.getElementById("CertificateOfOccupancyDocError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-CertificateOfOccupancyDoc-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-CertificateOfOccupancyDoc-info').val($(this).val());
                }

                var ProofFiles = $('#upload-CertificateOfOccupancyDoc-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("CertificateOfOccupancyDocError").style.display = 'none';
                }
            }
        });

    });
    function FormValidation() {
        var checkLists = JSON.stringify(docChecklists);
        $('#hiddenChecklists').val(checkLists);
        $('#create-form').submit();
    }
</script>