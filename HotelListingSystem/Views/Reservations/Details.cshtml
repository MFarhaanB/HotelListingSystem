@model HotelListingSystem.Models.Reservation

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap4.min.css">
    <meta name="viewport" content="width=device-width" />
    <title>Update Reservation</title>
    @Html.Partial("_eHead")
    <style>
        .c_half_input {
            width: 177px;
        }
    </style>
</head>
<body>
    <main>
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.HotelId)
        <div class="form-horizontal">
            <h1 class="col-md-offset-2">Details</h1>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <br />
            <br />
            <h5 class="col-md-offset-2">Personal Details</h5>
            <hr class="col-md-offset-2" />
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Reservation By User", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.HotelUser.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Identification No.", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.HotelUser.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Mobile No.", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.HotelUser.MobileNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>

                @Html.LabelFor(model => model.HotelUser, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.HotelUser.EmailAddress, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>

            <hr class="col-md-offset-2" />
            <div class="form-group text-right">
                <div class="col-md-offset-2 col-md-4">
                    <input type="submit" value="Send Email" class="btn btn-sm btn-success" hidden />
                    <input type="submit" value="View Profile" class="btn btn-sm btn-secondary" />
                </div>
            </div>

            <br />
            <br />
            <h5 class="col-md-offset-2">Reservation Information</h5>
            <hr class="col-md-offset-2" />

            <div class="form-group">
                @Html.LabelFor(model => model.Hotel.Name, "Reserved Hotel", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Hotel.Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Hotel.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CheckInDate, "Check-In Date", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckInDate, new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "required", @Id = "CheckInId" } })
                    @Html.ValidationMessageFor(model => model.CheckInDate, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.CheckOutDate, "Check-Out Date", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckOutDate, new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "required", @Id = "CheckOutId" } })
                    @Html.ValidationMessageFor(model => model.CheckOutDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RoomId, "Room Type", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.DropDownListFor(model => model.RoomId, (SelectList)ViewBag.ThisHotelRooms, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoomId, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.NoOfRooms, "Number Of Room/s", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.NoOfRooms, new { htmlAttributes = new { @class = "form-control", @min = "1", @max = "50", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.NoOfRooms, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TotalCost, "Room Number", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckInRoom.RooomNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.TotalCost, "Total Cost", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.TotalCost, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
            </div>

            <hr class="col-md-offset-2" />
            <div class="form-group text-right">
                <div class="col-md-offset-2 col-md-4">
                    <input type="submit" value="Update" class="btn btn-sm btn-warning" />
                    <input type="submit" value="Calncel" class="btn btn-sm btn-danger" />
                </div>
            </div>

            <br />
            <br />
            <h5 class="col-md-offset-2">Hotel Add-Ons Details</h5>
            <hr class="col-md-offset-2" />
            <br />
            <div class="form-group">
                @Html.LabelFor(model => model.Hotel.Name, "Breakfast Menu", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Sandwich - R75.00") <br />
                </div>
                @Html.LabelFor(model => model.Hotel.Name, "Breakfast Menu", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                    <input type="checkbox" value="Sandwich" name="Sandwich" /> @Html.Raw("Meat Meal - R250") <br />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-md-offset-1" style="margin-left:55px;">
                </div>
                @Html.LabelFor(model => model.TotalCost, "Total Cost", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.TotalCost, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr class="col-md-offset-2" />
            <div class="form-group text-right">
                <div class="col-md-offset-2 col-md-4">
                    <input type="submit" value="Update" class="btn btn-sm btn-warning" />
                    <input type="submit" value="Remove" class="btn btn-sm btn-danger" />
                </div>
            </div>


            <br />
            <br />
            <h5 class="col-md-offset-2">Make Payment</h5>
            <hr class="col-md-offset-2" />
            <br />
            <div class="form-group">
                <div class="form-group">
                    @Html.LabelFor(model => model.RoomId, "Payment Method", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                    <div class="col-md-2 c_half_input">
                        @Html.DropDownListFor(model => model.RoomId, new List<SelectListItem>
                        {
                            new SelectListItem { Value = "a_paypal_payment", Text = "Paypal" },
                            new SelectListItem { Value = "a_yoco_payment_method", Text = "Credit/Debit" }
                        }, htmlAttributes: new { @class = "form-control", @onchange = "ChangePaymentMethod(this.value)" })
                        @Html.ValidationMessageFor(model => model.RoomId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <hr class="col-md-offset-2" />
            <div class="form-group text-right">
                <div class="col-md-offset-2 col-md-4">
                    <input type="button" value="Paypal Pay Now" class="btn btn-sm btn-primary" id="paypalPayment" />
                    @*<input type="button" value="Debit/Credit Card Payment" class="btn btn-sm btn-warning" id="cardPaymentButton" style="display:none;" />*@
                    <button class="btn btn-sm btn-warning" id="cardPaymentButton" style="display:none;">Debit/Credit Card Payment</button>
                </div>
            </div>
        </div>
    </main>
</body>
</html>
@Html.Partial("_eFooter")


<!-- Include the Yoco SDK in your web page -->
<script src="https://js.yoco.com/sdk/v1/yoco-sdk-web.js"></script>

<!-- Create a pay button that will open the popup-->
@*<button id="checkout-button">Pay</button>*@

<script type="text/javascript">
    var yoco = new window.YocoSDK({

        publicKey: 'pk_test_ed3c54a6gOol69qa7f45',
    });
    var checkoutButton = document.querySelector('#cardPaymentButton');
    checkoutButton.addEventListener('click', function () {
        debugger
        yoco.showPopup({
            amountInCents: 2799,
            currency: 'ZAR',
            name: 'Your Store or Product',
            description: 'Awesome description',
            callback: function (result) {
                debugger;
                // This function returns a token that your server can use to capture a payment
                if (result.error) {
                    const errorMessage = result.error.message;
                    alert("error occured: " + errorMessage);
                } else {
                    alert("card successfully tokenised: " + result.id);
                }
                // In a real integration - you would now pass this chargeToken back to your
                // server along with the order/basket that the customer has purchased.
            }
        })
    });
</script>


<script>
    function ChangePaymentMethod(paymentMethod) {
        switch (paymentMethod) {
            case "a_paypal_payment":
                $('#cardPaymentButton').hide();
                $('#paypalPayment').show();
                break;
            case "a_yoco_payment_method":
                $('#cardPaymentButton').show();
                $('#paypalPayment').hide();
                break;
        }
    }



    function formatdate(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, "0");
        var day = date.getDate().toString().padStart(2, "0");
        var formattedDate = year + "-" + month + "-" + day;
        return formattedDate;
    }

    $(document).ready(function () {
        document.getElementById("CheckOutId").value = formatdate(new Date('@Model.CheckOutDate'));
        document.getElementById("CheckInId").value = formatdate(new Date('@Model.CheckInDate'));
    });


    $("#RoomId").on('change', function myfunction() {
        var noOfRooms = $("#NoOfRooms").val();
        var roomId = $("#RoomId").val();
            $.ajax({
                url: '@Url.Action("GetTotalCost", "Reservations")',
                type: 'POST',
                data: { roomId: roomId, noOfRooms: noOfRooms },
                success: function (data) {
                    if (data.success) {
                        $("#TotalCost").val(data.message)
                    } else {
                        alert(data.message);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
    });
    $("#NoOfRooms").on('change', function myfunction() {
        var noOfRooms = $("#NoOfRooms").val();
        var roomId = $("#RoomId").val();
            $.ajax({
                url: '@Url.Action("GetTotalCost", "Reservations")',
                type: 'POST',
                data: { roomId: roomId, noOfRooms: noOfRooms },
                success: function (data) {
                    if (data.success) {
                        $("#TotalCost").val(data.message)
                    } else {
                        alert(data.message);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
    });
</script>

